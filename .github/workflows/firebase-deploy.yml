# Firebase Deployment Workflow
# 
# This is the recommended deployment approach for the Time Tracking System.
# It uses Google Cloud Workload Identity Federation for secure, keyless authentication.
# 
# For detailed documentation on this deployment process, see:
# docs/ci-cd-guide.md
#
# DO NOT create duplicate deployment workflows or manual deployment scripts.
# All production deployments should go through this GitHub Actions workflow.

name: Firebase Deployment

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Lint
        run: pnpm run lint
      
      - name: Test
        run: pnpm run test
      
      - name: Project Cleanup
        run: |
          echo "Performing project cleanup before build..."
          # Set CI environment variable to ensure proper cleanup behavior
          export CI=true
          # On CI we use the node script which will select the right platform script
          pnpm run cleanup
          echo "Cleanup completed."
      
      - name: Build packages
        run: |
          echo "Building packages..."
          # Set NODE_ENV for proper DEV variable
          export NODE_ENV=production
          # Use the script from package.json
          pnpm run build:all
      
      # Authenticate with Google Cloud for all deployments
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/266526530869/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-sa@autonomy-heroes.iam.gserviceaccount.com'
      
      # Deploy to production when pushing to main
      - name: Deploy to Firebase Hosting and Rules
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          npm install -g firebase-tools
          firebase deploy --only hosting,firestore:rules
      
      # Deploy PR previews using the Firebase Hosting GitHub Action
      # This will add deployment info directly to the PR
      - name: Deploy PR Preview
        if: github.event_name == 'pull_request'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          # No need for firebaseServiceAccount when using workload identity federation
          projectId: 'autonomy-heroes'
          channelId: 'pr-${{ github.event.number }}'
          # Use the credentials obtained from workload identity federation
          entryPoint: './'
          firebaseToolsVersion: '12.4.7'

      # The old approach using direct Firebase CLI command (kept for reference)
      # - name: Deploy PR Preview
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     npm install -g firebase-tools
      #     firebase hosting:channel:deploy pr-${{ github.event.number }} --json

      # The previous approach using FIREBASE_SERVICE_ACCOUNT (commented out for reference)
      # - name: Deploy PR Preview
      #   if: github.event_name == 'pull_request'
      #   uses: FirebaseExtended/action-hosting-deploy@v0
      #   with:
      #     repoToken: '${{ secrets.GITHUB_TOKEN }}'
      #     firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
      #     projectId: 'autonomy-heroes'
      #     channelId: 'pr-${{ github.event.number }}'